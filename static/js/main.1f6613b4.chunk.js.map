{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["React","constructor","props","super","event","newValue","caretPos","this","maxIndex","state","propositions","selected","deleteEvent","validate","clearPropositions","fakeEvent","target","id","shortname","emojiSelected","emojiShortname","removeFromIndex","replaceBetweenIndex","fullStr","insertStr","from","to","selection","lastColonIndex","previousColonIndex","spaceIndex","autoReplace","emoji","emojis","find","count","filter","keep","length","textValue","caretPosition","render","className","style","ref","textArea","value","onChange","onKeyDown","handleKeyDown","map","index","key","onClick","onEmojiClicked","char","App","position","top","left","transform","textAreaStyle","fontSize","ReactDOM","document","getElementById"],"mappings":"ogCAIO,MAAM,UAAsBA,IAA5B,UACNC,YAAYC,GACXC,MAAA,GADkB,kBAcHC,IACf,IAAIC,EAAWD,SAAf,MACIE,EAAWF,SAAf,eACAG,KAAA,qBAjBkB,mBAoBFH,IAChB,IAAII,EAAWD,KAAKE,MAAMC,aAA1B,OACA,KAAa,CACZ,IAAIC,EAAWJ,KAAKE,MAApB,cACIG,GAAJ,EACIC,GAAJ,EACIC,GAAJ,EACA,OAAQV,EAAR,SACC,QACCO,IACA,MACD,QACCA,IACA,MACD,QACCE,KACA,MACD,QACCC,KACAF,KACA,MACD,QACCA,KAMF,GAHID,EAAJ,IAAkBA,KACdA,EAAWH,EAAf,IAA2BG,EAAWH,EAAXG,GAE3B,EAEC,GADAP,mBACA,EAAa,CAEZ,IAAIW,EAAY,CACfC,OAAQ,CAAEC,GAAIV,KAAKE,MAAMC,aAAaC,GAAUO,YAEjDX,KAAA,uBAEAA,KAAA,SAAc,CAACY,cAAeR,SAG/B,GACCJ,KAAA,SAAc,CAACG,aAAD,GAAmBS,cAAe,MA7DjC,oBAmEDf,IACjB,IAAIgB,EAAiBhB,SAArB,GACIC,EAAWE,KAAKE,MAApB,UAEIY,EAAkBhB,kBAA0BE,KAAKE,MAArD,eACAJ,EACCE,KAAKe,oBAAoB,EAAzB,IAICf,KAAKE,MALPJ,eAOAE,KAAA,iBACAA,KAAA,iBAA8Bc,EAAkBD,EAAhD,SAhFkB,yBAmFG,CAACG,EAASC,EAAWC,EAAMC,IAE/CH,mBAEAA,YAHD,GApFkB,oBA2FF,CAAClB,EAAUC,KAC3B,IAAII,EAAJ,GACIiB,EAAYpB,KAAKE,MAArB,cAGImB,EAAiBvB,kBAArB,GACIwB,EAAqBxB,kBAA0BuB,EAAnD,GAGIE,EAAazB,kBAA0BC,EAA3C,GAGIyB,EACFD,KACDD,EAFD,EAKIJ,GAAQM,EAAcF,EAAf,GAAX,EACIH,EAAMK,EAAczB,EAAH,EAArB,EACIY,EAAYb,cAAhB,GAGA,GAAIyB,KAA+BZ,EAAnC,OACC,KAAgB,CACf,IAAIc,EAAQzB,KAAK0B,OAAOC,KAAKF,GAAUA,yBAAvC,EAAuCA,WACvC,IAAIA,IAEH3B,EAAWE,KAAKe,oBAAoB,EAEnCU,EAFU,OAIVJ,EAJDvB,GAOAsB,SAEK,CAEN,IAAIQ,EAAJ,EACAzB,EACCH,KAAK0B,OAAOG,OAAOJ,IAClB,IAAIK,EACHL,yBACAG,EAAQ5B,KAFT,cAIA,OADA4B,KACA,GANFzB,MAQIH,KAAKE,MAAMC,aAAa4B,SAAW5B,EAAvC,SACCiB,KAKHpB,KAAA,SAAc,CACbgC,UADa,EAEbC,cAFa,EAGb9B,aAHa,EAIbS,cAAeQ,KAjJhBpB,KAAA,MAAa,CACZgC,UADY,GAEZC,cAFY,EAGZrB,cAHY,EAIZT,aAAc,IAEfH,KAAA,gBACAA,KAAA,OAAc0B,EACd1B,KAAA,SAAgBP,IAAhB,YA6IDyC,SACC,OACC,yBACCC,UADD,iBAECC,MAAOpC,KAAKL,MAAMyC,OAClB,8BACCC,IAAMC,GAAatC,KAAKsC,SADzB,EAECF,MAAOpC,KAAKL,MAFb,cAGC4C,MAAOvC,KAAKE,MAHb,UAICiC,UAJD,8BAKCK,SAAUxC,KALX,aAMCyC,UAAWzC,KAAK0C,gBAEhB,yBAAKP,UAAW,6BAEhBnC,KAAKE,MAAMC,aAAawC,IAAI,CAAClB,EAAOmB,KACnC,IAAIT,EACFS,IAAU5C,KAAKE,MAAf0C,uFADF,oDAIA,OAAO,0BACJC,IAAKpB,EADD,QAEJf,GAAIe,EAFA,UAGJU,UAHI,EAIJW,QAAS9C,KAAK+C,gBAJV,UAKAtB,EAAMuB,KALN,YAKcvB,EALrB,UAAO,W,MC7JEwB,MAfH,IAER,kBAAC,EAAD,CACEb,MAAO,CACLc,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,oBAEbC,cAAe,CACbC,SAAU,UCTlBC,IAAStB,OAAO,kBAAC,EAAD,MAASuB,SAASC,eAAe,U","file":"static/js/main.1f6613b4.chunk.js","sourcesContent":["import React from 'react'\nimport emojis from './emoji'\nimport '../assets/TextAreaEmoji.css'\n\nexport class TextAreaEmoji extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\ttextValue: '',\n\t\t\tcaretPosition: 0,\n\t\t\temojiSelected: 0,\n\t\t\tpropositions: []\n\t\t};\n\t\tthis.selectorLimit = 5;\n\t\tthis.emojis = emojis.emojis;\n\t\tthis.textArea = React.createRef();\n\t}\n\n\thandleChange = (event) => {\n\t\tlet newValue = event.target.value;\n\t\tlet caretPos = event.target.selectionStart;\n\t\tthis.transformValue(newValue, caretPos);\n\t}\n\n\thandleKeyDown = (event) => {\n\t\tlet maxIndex = this.state.propositions.length;\n\t\tif (maxIndex){\n\t\t\tlet selected = this.state.emojiSelected;\n\t\t\tlet deleteEvent = true;\n\t\t\tlet validate = false;\n\t\t\tlet clearPropositions = false;\n\t\t\tswitch (event.keyCode){\n\t\t\t\tcase 38: // up arrow\n\t\t\t\t\tselected--;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 40: // down arrow\n\t\t\t\t\tselected++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 13: // enter\n\t\t\t\t\tvalidate = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 27: // escape\n\t\t\t\t\tclearPropositions = true;\n\t\t\t\t\tdeleteEvent = false;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tdeleteEvent = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (selected < 0) selected = 0;\n\t\t\tif (selected > maxIndex-1) selected = maxIndex-1;\n\t\t\t\n\t\t\tif (deleteEvent){\n\t\t\t\tevent.preventDefault();\n\t\t\t\tif (validate){\n\t\t\t\t\t// create a fake event for onEmojiClicked\n\t\t\t\t\tlet fakeEvent = {\n\t\t\t\t\t\ttarget: { id: this.state.propositions[selected].shortname }\n\t\t\t\t\t}\n\t\t\t\t\tthis.onEmojiClicked(fakeEvent);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({emojiSelected: selected});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (clearPropositions){\n\t\t\t\t\tthis.setState({propositions: [], emojiSelected: 0});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonEmojiClicked = (event) => {\n\t\tlet emojiShortname = event.target.id;\n\t\tlet newValue = this.state.textValue;\n\n\t\tlet removeFromIndex = newValue.lastIndexOf(':', this.state.caretPosition);\n\t\tnewValue = \n\t\t\tthis.replaceBetweenIndex(\n\t\t\t\tnewValue,\n\t\t\t\temojiShortname,\n\t\t\t\tremoveFromIndex,\n\t\t\t\tthis.state.caretPosition\n\t\t\t);\n\t\tthis.textArea.focus();\n\t\tthis.transformValue(newValue, removeFromIndex + emojiShortname.length);\n\t}\n\n\treplaceBetweenIndex = (fullStr, insertStr, from, to) => {\n\t\tlet newStr =\n\t\t\tfullStr.substring(0, from) +\n\t\t\tinsertStr +\n\t\t\tfullStr.substring(to);\n\t\treturn newStr;\n\t}\n\n\ttransformValue = (newValue, caretPos) => {\n\t\tlet propositions = [];\n\t\tlet selection = this.state.emojiSelected;\n\n\t\t// index of the 2 last colon\n\t\tlet lastColonIndex = newValue.lastIndexOf(':', caretPos);\n\t\tlet previousColonIndex = newValue.lastIndexOf(':', lastColonIndex - 1);\n\n\t\t// index of the last space\n\t\tlet spaceIndex = newValue.lastIndexOf(' ', caretPos - 1);\n\n\t\t// determine if auto replace in case of exact match\n\t\tlet autoReplace =\n\t\t\t(spaceIndex < previousColonIndex &&\n\t\t\tpreviousColonIndex < lastColonIndex);\n\n\t\t// extract the potential emoji shortname\n\t\tlet from = (autoReplace ? previousColonIndex : lastColonIndex) + 1;\n\t\tlet to = (autoReplace ? caretPos - 1 : caretPos);\n\t\tlet shortname = newValue.substring(from, to);\n\n\t\t//console.log(autoReplace, caretPos, spaceIndex, previousColonIndex, lastColonIndex);\n\t\tif (spaceIndex < lastColonIndex && shortname.length) {\n\t\t\tif (autoReplace){\n\t\t\t\tlet emoji = this.emojis.find(emoji => (emoji.shortname === `:${shortname}:`));\n\t\t\t\tif (emoji !== undefined){\n\t\t\t\t\t//console.log(emoji.shortname, previousColonIndex, lastColonIndex);\n\t\t\t\t\tnewValue = this.replaceBetweenIndex(\n\t\t\t\t\t\tnewValue,\n\t\t\t\t\t\temoji.char,\n\t\t\t\t\t\tpreviousColonIndex,\n\t\t\t\t\t\tlastColonIndex + 1\n\t\t\t\t\t);\n\t\t\t\t\t// when we replace, put selection value to 0\n\t\t\t\t\tselection = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// filter the potentials emoji choice\n\t\t\t\tlet count = 0;\n\t\t\t\tpropositions =\n\t\t\t\t\tthis.emojis.filter(emoji => {\n\t\t\t\t\t\tlet keep =\n\t\t\t\t\t\t\temoji.shortname.includes(shortname) &&\n\t\t\t\t\t\t\tcount < this.selectorLimit;\n\t\t\t\t\t\tcount += keep;\n\t\t\t\t\t\treturn keep;\n\t\t\t\t\t}, this);\n\t\t\t\tif (this.state.propositions.length !== propositions.length){\n\t\t\t\t\tselection = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\ttextValue: newValue,\n\t\t\tcaretPosition: caretPos,\n\t\t\tpropositions: propositions,\n\t\t\temojiSelected: selection\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'textarea-emoji'}\n\t\t\t\tstyle={this.props.style}>\n\t\t\t\t<textarea\n\t\t\t\t\tref={(textArea) => this.textArea = textArea}\n\t\t\t\t\tstyle={this.props.textAreaStyle}\n\t\t\t\t\tvalue={this.state.textValue}\n\t\t\t\t\tclassName={\"form-control textarea-emoji\"}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tonKeyDown={this.handleKeyDown} />\n\n\t\t\t\t\t<div className={\"list-group emoji-selector\"}>\n\t\t\t\t\t{\n\t\t\t\t\tthis.state.propositions.map((emoji, index) => {\n\t\t\t\t\t\tlet className = \n\t\t\t\t\t\t\t(index === this.state.emojiSelected ?\n\t\t\t\t\t\t\t\t\"emoji py-1 list-group-item list-group-item-action list-group-item-info\"\n\t\t\t\t\t\t\t\t: \"emoji py-1 list-group-item list-group-item-action\");\n\t\t\t\t\t\treturn <span \n\t\t\t\t\t\t\t\t\tkey={emoji.unicode}\n\t\t\t\t\t\t\t\t\tid={emoji.shortname}\n\t\t\t\t\t\t\t\t\tclassName={className}\n\t\t\t\t\t\t\t\t\tonClick={this.onEmojiClicked}>\n\t\t\t\t\t\t\t\t\t{`${emoji.char} ${emoji.shortname} `}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react'\n\nimport { TextAreaEmoji } from 'react-textarea-emoji'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst App = () => {\n  return (\n    <TextAreaEmoji\n      style={{\n        position: 'fixed',\n        top: '30%',\n        left: '50%',\n        transform: 'translateX(-50%)',\n      }}\n      textAreaStyle={{\n        fontSize: '20pt',\n      }}/>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}